package com.rentalproperty.controller;

import com.rentalproperty.Factories.AddressFactory;
import com.rentalproperty.Services.Impl.AddressServiceImpl;
import com.rentalproperty.Services.Impl.PropertyServiceImpl;
import com.rentalproperty.domain.Address;
import com.rentalproperty.domain.Property;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;


// This means that this class is a Controller
@Controller

// This means URL's start with /address (after Application path)


//localhost:8080/address/addAddress?id=1&street=see&city=me&province=western&postalCode=123
@RequestMapping(path="/address")
public class AddressController {

    private Property property;
    private Address address;
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private AddressServiceImpl addressService;

    @Autowired
    private PropertyServiceImpl propertyService;

    // Map ONLY GET Requests
    @GetMapping(path="/{propertyId}/addAddress")

    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    public @ResponseBody Address create (@PathVariable long propertyId, @RequestParam String street, @RequestParam String city,
                                               @RequestParam String province, @RequestParam String postalCode)
    {
        //@RequestParam -> Means that the user inputs data into the address and the values are returned

        //Returned values are placed in the Map
       Map<String, String> addressValues;

       addressValues = new HashMap<String, String>();
       addressValues.put("street",street);
       addressValues.put("city",city);
       addressValues.put("province", province);
       addressValues.put("postalCode",postalCode);

       property = propertyService.read(propertyId);

       address = AddressFactory.getAddress(addressValues, property);

       //Using the repository to save the input data from the address
        return addressService.save(address);

    }
//http://localhost:8080/address/findByPropertyID?&propertyId=1
    @GetMapping(path="/findByPropertyID")
    public @ResponseBody Address findByPropertyID(@RequestParam long propertyId)
    {
        return addressService.findByPropertyID(propertyId);
    }

    @GetMapping(path="/readAddress")
    public @ResponseBody Address read(@RequestParam long id)
    {
        return addressService.read(id);
    }

    @GetMapping(path="/updateAddress")
    public @ResponseBody Address update (@RequestParam long id, @RequestParam String street, @RequestParam String city,
                           @RequestParam String province, @RequestParam String postalCode)
    {
        addressService.read(id);
        Address updateAddress = new Address.Builder()
                .id(id)
                .street(street)
                .city(city)
                .province(province)
                .postalCode(postalCode)
                .build();
        return addressService.save(updateAddress);
    }

    @GetMapping(path="/deleteAddress")
    public @ResponseBody void delete(@RequestParam long id)
    {
        addressService.delete(id);
    }

    //@GetMapping(path="/showAddress")
    /*public @ResponseBody Iterable<Address> getAllAddress()
    {
        return addressService.findAll();
    }*/
}
